import { basename } from "node:path";

/**
 * Convert filename to PascalCase class name
 * Examples:
 *   users → UsersApi
 *   user-profile → UserProfileApi
 *   todo-items → TodoItemsApi
 */
function toPascalCase(filename: string): string {
	// Remove .ts extension
	const withoutExt = filename.replace(/\.ts$/, "");

	// Split by dash, underscore, or camelCase
	const words = withoutExt
		.replace(/([a-z])([A-Z])/g, "$1-$2")
		.split(/[-_]/)
		.filter(Boolean);

	const pascalCase = words
		.map((word) => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())
		.join("");

	return `${pascalCase}Api`;
}

/**
 * Get route path from file path
 * Examples:
 *   users.ts → /users
 *   todo-items.ts → /todo-items
 */
export function getRoutePath(filePath: string): string {
	return `/${filePath.replace(/\.ts$/, "")}`;
}

/**
 * Generate API class template for new file
 */
export function generateFileTemplate(
	filename: string,
	relativePath: string,
): string {
	const className = toPascalCase(basename(filename));
	const routePath = getRoutePath(relativePath);

	// Use restify alias for imports (configured in vite.config.ts)
	const importPath = "restify";

	// Always include full CRUD operations
	const imports =
		"Body, Collection, DELETE, GET, Logger, Path, POST, PUT, Restify";

	const template = `import { ${imports} } from "${importPath}";

/**
 * API endpoint for ${routePath}
 * Auto-generated by restify-gen
 */
@Collection("${routePath}")
export class ${className} extends Restify {
\t@GET("")
\t@Logger()
\tasync getAll() {
\t\t// GET ${routePath} - Get all items
\t\treturn {
\t\t\tdata: [],
\t\t};
\t}

\t@GET("/:id")
\t@Logger()
\tasync getById(@Path("id") id: string) {
\t\t// GET ${routePath}/:id - Get item by id
\t\treturn {
\t\t\tdata: { id },
\t\t};
\t}

\t@POST("")
\t@Logger()
\tasync create(@Body() body: unknown) {
\t\t// POST ${routePath} - Create new item
\t\treturn {
\t\t\tdata: { id: "generated-id", ...body as object },
\t\t};
\t}

\t@PUT("/:id")
\t@Logger()
\tasync update(@Path("id") id: string, @Body() body: unknown) {
\t\t// PUT ${routePath}/:id - Update item
\t\treturn {
\t\t\tdata: { id, ...body as object },
\t\t};
\t}

\t@DELETE("/:id")
\t@Logger()
\tasync delete(@Path("id") id: string) {
\t\t// DELETE ${routePath}/:id - Delete item
\t\treturn {
\t\t\tdata: { success: true, id },
\t\t};
\t}
}
`;

	return template;
}
